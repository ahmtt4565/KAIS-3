import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import { API } from "../App";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { MapPin, ArrowLeft, DollarSign, Bell, BellOff } from "lucide-react";
import { format } from "date-fns";
import BottomNav from "@/components/BottomNav";
import KaisLogo from "@/components/KaisLogo";
import { useToast } from "@/hooks/use-toast";

export default function NearbyListings({ user, logout }) {
  const navigate = useNavigate();
  const { toast } = useToast();
  const [listings, setListings] = useState([]);
  const [nearbyListings, setNearbyListings] = useState([]);
  const [loading, setLoading] = useState(true);
  const [notificationsEnabled, setNotificationsEnabled] = useState(false);

  useEffect(() => {
    fetchListings();
    checkNotificationPermission();
  }, []);

  useEffect(() => {
    if (listings.length > 0 && user) {
      filterNearbyListings();
    }
  }, [listings, user]);

  const checkNotificationPermission = () => {
    if ("Notification" in window) {
      setNotificationsEnabled(Notification.permission === "granted");
    }
  };

  const requestNotificationPermission = async () => {
    if (!("Notification" in window)) {
      toast({
        title: "Bildirimler Desteklenmiyor",
        description: "Tarayıcınız bildirim özelliğini desteklemiyor.",
        variant: "destructive",
      });
      return;
    }

    try {
      const permission = await Notification.requestPermission();
      if (permission === "granted") {
        setNotificationsEnabled(true);
        localStorage.setItem("notificationsEnabled", "true");
        localStorage.setItem("userCity", user.country); // Kullanıcının şehrini kaydet
        
        toast({
          title: "✅ Bildirimler Aktif",
          description: `${user.country} şehrinde yeni ilan eklendiğinde bildirim alacaksınız!`,
        });

        // Test bildirimi gönder
        new Notification("KAIS - Bildirimler Aktif", {
          body: `${user.country} şehrindeki yeni ilanlardan haberdar olacaksınız!`,
          icon: "/logo192.png",
        });
      } else {
        toast({
          title: "Bildirimler Reddedildi",
          description: "Tarayıcı ayarlarından bildirimleri açabilirsiniz.",
          variant: "destructive",
        });
      }
    } catch (error) {
      console.error("Notification error:", error);
    }
  };

  const disableNotifications = () => {
    setNotificationsEnabled(false);
    localStorage.removeItem("notificationsEnabled");
    localStorage.removeItem("userCity");
    
    toast({
      title: "Bildirimler Kapatıldı",
      description: "Artık yeni ilan bildirimleri almayacaksınız.",
    });
  };

  const fetchListings = async () => {
    try {
      const response = await axios.get(`${API}/listings`, {
        headers: { Authorization: `Bearer ${localStorage.getItem("token")}` },
      });
      setListings(response.data);
    } catch (error) {
      console.error("Error fetching listings:", error);
      toast({
        title: "Hata",
        description: "İlanlar yüklenirken hata oluştu.",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const filterNearbyListings = () => {
    // Kullanıcının şehrindeki ilanları filtrele (kendi ilanları hariç)
    const nearby = listings.filter(
      (listing) =>
        listing.country === user.country &&
        listing.user_id !== user.id &&
        listing.status === "active"
    );
    setNearbyListings(nearby);
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-teal-50 dark:from-gray-900 to-orange-50 flex items-center justify-center">
        <div className="text-xl text-teal-600">Yükleniyor...</div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-teal-50 dark:from-gray-900 to-orange-50 dark:to-gray-900">
      {/* Header */}
      <div className="bg-white dark:bg-gray-800 shadow-sm border-b sticky top-0 z-10">
        <div className="max-w-6xl mx-auto px-4 py-4">
          <div className="flex items-center gap-4">
            <Button
              variant="ghost"
              size="icon"
              onClick={() => navigate(-1)}
              className="hover:bg-teal-50 dark:hover:bg-gray-700"
            >
              <ArrowLeft className="w-5 h-5" />
            </Button>

            <div
              onClick={() => navigate("/dashboard")}
              className="cursor-pointer hover:opacity-80 transition-opacity"
            >
              <KaisLogo className="w-10 h-10" />
            </div>

            <div className="flex items-center gap-3 flex-1">
              <div className="w-12 h-12 bg-gradient-to-br from-teal-600 to-orange-500 rounded-full flex items-center justify-center">
                <MapPin className="w-6 h-6 text-white" />
              </div>
              <div>
                <h1 className="text-xl font-bold text-gray-900 dark:text-white">Yakınımdaki İlanlar</h1>
                <p className="text-sm text-gray-600 dark:text-gray-300">
                  <MapPin className="w-3 h-3 inline mr-1" />
                  {user.country}
                </p>
              </div>
            </div>

            {/* Notification Toggle */}
            <Button
              variant={notificationsEnabled ? "default" : "outline"}
              size="sm"
              onClick={notificationsEnabled ? disableNotifications : requestNotificationPermission}
              className={notificationsEnabled ? "bg-green-600 hover:bg-green-700" : "dark:bg-gray-700 dark:text-white dark:border-gray-600 dark:hover:bg-gray-600"}
            >
              {notificationsEnabled ? (
                <>
                  <Bell className="w-4 h-4 mr-2" />
                  Bildirimler Açık
                </>
              ) : (
                <>
                  <BellOff className="w-4 h-4 mr-2" />
                  Bildirimleri Aç
                </>
              )}
            </Button>
          </div>
        </div>
      </div>

      {/* Content */}
      <div className="max-w-6xl mx-auto px-4 py-6 pb-32 md:pb-6">
        {/* Info Card */}
        <Card className="mb-6 border-2 border-teal-200 bg-gradient-to-r from-teal-50 to-orange-50 dark:to-gray-900">
          <CardContent className="p-4">
            <div className="flex items-start gap-3">
              <MapPin className="w-5 h-5 text-teal-600 flex-shrink-0 mt-0.5" />
              <div>
                <p className="font-semibold text-gray-900 dark:text-white mb-1">
                  {user.country} Şehrindeki İlanlar
                </p>
                <p className="text-sm text-gray-600 dark:text-gray-300">
                  Aynı şehirde bulunan aktif {nearbyListings.length} ilan gösteriliyor.
                  Bildirimleri açarak yeni ilanlardan anında haberdar olabilirsiniz!
                </p>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Listings Grid */}
        {nearbyListings.length === 0 ? (
          <Card className="border-2 border-gray-200 dark:border-gray-700">
            <CardContent className="p-12 text-center">
              <MapPin className="w-16 h-16 text-gray-300 mx-auto mb-4" />
              <h3 className="text-xl font-semibold text-gray-900 dark:text-white mb-2">
                Yakınınızda İlan Yok
              </h3>
              <p className="text-gray-600 dark:text-gray-300 mb-6">
                {user.country} şehrinde henüz aktif ilan bulunmuyor.
                <br />
                Bildirimler açıksa yeni ilan eklendiğinde haberdar olacaksınız!
              </p>
              <Button
                onClick={() => navigate("/create")}
                className="bg-gradient-to-r from-teal-600 to-orange-500 hover:from-teal-700 hover:to-orange-600"
              >
                İlk İlanı Siz Oluşturun
              </Button>
            </CardContent>
          </Card>
        ) : (
          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
            {nearbyListings.map((listing) => (
              <Card
                key={listing.id}
                className="hover:shadow-lg transition-shadow cursor-pointer border-2 border-gray-200 dark:border-gray-700 hover:border-teal-300"
                onClick={() => navigate(`/listing/${listing.id}`)}
              >
                <CardHeader>
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <CardTitle className="text-lg mb-2">
                        <DollarSign className="inline w-5 h-5 text-teal-600" />
                        {listing.from_amount} {listing.from_currency}
                      </CardTitle>
                      <div className="flex items-center gap-2 text-sm text-gray-600 dark:text-gray-300">
                        <MapPin className="w-4 h-4 text-orange-500" />
                        {listing.city}, {listing.country}
                      </div>
                    </div>
                    <Badge variant="secondary" className="bg-green-100 text-green-800">
                      Yakın
                    </Badge>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    <div className="flex items-center justify-between text-sm">
                      <span className="text-gray-600 dark:text-gray-300">İstenen:</span>
                      <span className="font-semibold text-gray-900 dark:text-white">
                        {listing.to_amount || "?"} {listing.to_currency}
                      </span>
                    </div>
                    <p className="text-sm text-gray-600 dark:text-gray-300 line-clamp-2">
                      {listing.description}
                    </p>
                    <div className="flex items-center justify-between text-xs text-gray-500 dark:text-gray-400 pt-2 border-t">
                      <span>@{listing.username}</span>
                      <span>{format(new Date(listing.created_at), "dd MMM yyyy")}</span>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        )}
      </div>

      <BottomNav user={user} />
    </div>
  );
}
